#perl program to read LED_rasters.txt and generate C++ language static
# initializers for the corresponding HCMS290x rasters. Two forms are needed:
# as-is and reversed up-to-down for projected characters
#
# This program appears in the git archive for reference, i.e. the
# output file, LED_rasters.h is also in the git archive and need
# not be regenerated unless something else changes
#
# invoke this twice. Note that the second appends to the first!
#   perl ./LED_rasters --normal < LED_rasters.txt > LED_rasters.h
#   perl ./LED_rasters --flip < LED_rasters.txt >> LED_rasters.h
#

use strict;
use warnings;

my $flip = 0;

if (
    ( @ARGV != 1 )
    || (   ( ( $ARGV[0] ne "--normal" ) ? ( $flip = 1 ) : 0 )
        && ( $ARGV[0] ne "--flip" ) )
  )
{
    die "usage: LED_rasters <--normal | --flip> <LED character file name>";
}

print "// These declarations are GENERATED by LED_rasters.pl. "
  . ( $flip ? "Flipped up/down rasters." : "Normal rasters." ) . "\n";

sub updown {

    # its not EXACTLY a bit reverse. The Broadcom LED
    # ignores the MSB in the byte
    my $arg         = hex(shift);
    my $bitReversed = 0;
    for ( my $i = 0 ; $i < 7 ; $i += 1 ) {
        $bitReversed <<= 1;
        if ( $arg & 0x1 ) {
            $bitReversed |= 1;
        }
        $arg >>= 1;
    }
    return sprintf( "%02x", $bitReversed );
}

my $started = 0;
my $numberOfCharacters = 0;
my $CinstanceName = $flip ? "gOem5x7FontFlipped" : "gOem5x7Font";
my $IndexOfFirstRasterableAscii = 0;
my @fontRows;

while ( my $line = <STDIN> ) {
    if ( $line =~ /^###/ ) { next; }
    my $AsciiChar =
      substr( $line, 0, 1 );   # $line begins with character that needs a raster
    $line = substr( $line, 1 );
    my @values;
    for ( my $i = 0 ; $i < 6 ; $i += 1 ) {
        push( @values, substr( $line, 1, 2 ) );
        $line = substr( $line, 3 );
    }
    my $asciiCode = shift @values;

    if ( $started == 0 ) {
        $IndexOfFirstRasterableAscii = $asciiCode;
        $started = 1;
    }
    my $row;
    foreach my $item (@values) {
        $row .= " 0x" . ( $flip ? updown($item) : $item ) . ",";
    }
    $row .= " // \"" . $AsciiChar . "\" aka: 0x" . $asciiCode . "\n";
    push(@fontRows, $row);
    $numberOfCharacters += 1;
}

if ($started) {
    print "namespace Raster5x7Font_" . $CinstanceName . "{\n";
    print "    const uint8_t rasters[] = {\n";
    foreach (@fontRows) {
        print $_;
    }
    print "};}\n";
    print "Raster5x7Font " . $CinstanceName . "({\n";
    print "    0x" . $IndexOfFirstRasterableAscii . ", // index of first font character\n";
    print "    " . $numberOfCharacters . ", // number of characters in this font\n";
    print "    Raster5x7Font_" . $CinstanceName . "::rasters});\n\n"; 
}
